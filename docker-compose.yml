version: "3.8"
services:
  front:
    build: ./frontend
    environment: 
      PORT: ${FRONT_PORT}
    ports:
      - "${FRONT_HOST}:${FRONT_PORT}"
      
  api:
    build:
      dockerfile: Dockerfile
      context: ./api-gateway
      target: development
    volumes:
      - ./api-gateway/src/:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:debug  
    environment: 
      NODE_ENV: development
      PORT: ${API_GATEWAY_PORT}
    ports:
      - "${API_HOST}:${API_GATEWAY_PORT}"

  service-a:
    build:
      dockerfile: Dockerfile
      context: ./service-a
      target: development
    volumes:
      - ./api-gateway/src/:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:debug
    environment: 
      NODE_ENV: development
      PORT: ${SERVICE_A_PORT}
    ports:
      - "${SERVICE_A_PORT}:${SERVICE_A_PORT}"
#-----------------DB-----------------#
  service-database:
    build:
      dockerfile: Dockerfile
      context: ./service-database
      target: development
    volumes:
      - ./service-database/src/:/usr/src/app
      - /usr/src/app/node_modules
    command: npm run start:debug
    environment: 
      NODE_ENV: development
      PORT: ${SERVICE_DB}
      MYSQL_HOST: mysqldb
      MYSQL_DATABASE: nestjs
    ports:
      - "${SERVICE_DB}:${SERVICE_DB}"
    networks:
      - mysql-compose-network
    depends_on:
      - mysqldb

  mysqldb:
    image: mysql:5.7
    environment:
      MYSQL_ROOT_PASSWORD: "admin"
      MYSQL_DATABASE: "nest"
    ports:
      - "${MYSQL_PORT}:${MYSQL_PORT}"
    volumes:
       - ${LOCAL_DOCKER_VOLUMES}:/var/lib/mysql
    networks:
      - mysql-compose-network

  adminer:
    image: adminer
    ports:
      - ${DB_HOST}:8080
    networks:
      - mysql-compose-network

networks: 
  mysql-compose-network:
    driver: bridge